# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18w82K2E-f2ZrlO1w_pbleTDu6sdsUimw
"""

import pickle
import tensorflow as tf

X_train=pickle.load(open('X_train.pkl','rb'))
y_train=pickle.load(open('y_train.pkl','rb'))

X_val=pickle.load(open('X_val.pkl','rb'))
y_val=pickle.load(open('y_val.pkl','rb'))

X_train=X_train/255

X_val=X_val/255

X_train.shape

from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Rescaling
# baseline model with dropout for the dogs vs cats dataset
import sys
from matplotlib import pyplot
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import Dropout
from keras.optimizers import SGD
from keras.preprocessing.image import ImageDataGenerator

y_train.shape

import numpy as np

y_train=np.asarray(y_train).astype('float32').reshape(y_train.shape[0],1)

y_val=np.asarray(y_val).astype('float32').reshape(y_val.shape[0],1)

y_train.shape

y_train[0]

X_test=pickle.load(open('X_test.pkl','rb'))
y_test=pickle.load(open('y_test.pkl','rb'))

X_test=X_test/255

y_test=np.asarray(y_test).astype('float32').reshape(y_test.shape[0],1)

model=Sequential()

model.add(Conv2D(16, 3, padding='same', kernel_initializer='he_uniform', activation='relu'))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(32, 3, padding='same', kernel_initializer='he_uniform', activation='relu'))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(64, 3, padding='same', kernel_initializer='he_uniform', activation='relu'))
model.add(MaxPooling2D((2,2)))

model.add(Flatten())

model.add(Dense(128, kernel_initializer='he_uniform',activation="relu"))

model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer="adam",loss="binary_crossentropy",metrics=["accuracy"])

tf.config.experimental_run_functions_eagerly(True)
epochs=10
history = model.fit(
  X_train,y_train,
  validation_data=(X_val, y_val),
  epochs=10,
    batch_size=32
)

score=model.evaluate(X_test, y_test, verbose=1)
print(score)



import os
import matplotlib.pyplot as plt
import cv2
img_path =os.path.join(r'C:\Users\TR\OneDrive\Masaüstü\Global ai hub\transfer_learning_project\kagglecatsanddogs_5340\PetImages',"dog.jpg")
img_arr =plt.imread(img_path)
img_arr = cv2.resize(img_arr,(200,200))

X=np.array(img_arr)
X.shape

X=X/255

X = np.expand_dims(X, axis = 0)
np.reshape(X,(-1,200,200,3))

result = model.predict(X)
if result[0][0] >= 0.5:
    prediction = 'dog'
    probability = result[0][0]
    print("probability = " + str(probability))
else:
    prediction = 'cat'
    probability = 1 - result[0][0]
    print("probability = " + str(probability))
print("Prediction = " + prediction)

